daemon off;

error_log /dev/stdout info;


events {
    worker_connections 1024;
}

rtmp {
    server {
        # listen ${RTMP_PORT};
        listen 1935;
        chunk_size 4000;

        application stream {
            live on;
            on_publish http://localhost/rtmp_onpublish;
            #on_play http://localhost/rtmp_onpublish;
            #on_done http://localhost/rtmp_ondone;
            on_publish_done http://localhost/rtmp_ondone;
            record off;

            exec_push ffmpeg -re -i rtmp://localhost:1935/stream/$name
              -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 2500k -f flv -g 30 -r 30 -s 1280x720 -vsync cfr -preset superfast -profile:v baseline rtmp://localhost:1935/live/$name_720p2628kbs
              -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 1000k -f flv -g 30 -r 30 -s 854x480 -vsync cfr -preset superfast -profile:v baseline rtmp://localhost:1935/live/$name_480p1128kbs
              -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 750k -f flv -g 30 -r 30 -s 640x360 -vsync cfr -preset superfast -profile:v baseline rtmp://localhost:1935/live/$name_360p878kbs
              -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 400k -f flv -g 30 -r 30 -s 426x240 -vsync cfr -preset superfast -profile:v baseline rtmp://localhost:1935/live/$name_240p528kbs
              -c:a libfdk_aac -b:a 64k -c:v libx264 -b:v 200k -f flv -g 15 -r 15 -s 426x240 -vsync cfr -preset superfast -profile:v baseline rtmp://localhost:1935/live/$name_240p264kbs;
       }

        application live {
            allow publish 127.0.0.1;
            deny publish all;

            live on;
            hls on;
            hls_fragment_naming system;
            hls_fragment 10;
            hls_playlist_length 120m;
            hls_type event;
            hls_path /opt/data;
            hls_nested on;
            hls_cleanup on;

            hls_variant _720p2628kbs BANDWIDTH=2628000,RESOLUTION=1280x720;
            hls_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
            hls_variant _360p878kbs BANDWIDTH=878000,RESOLUTION=640x360;
            hls_variant _240p528kbs BANDWIDTH=528000,RESOLUTION=426x240;
            hls_variant _240p264kbs BANDWIDTH=264000,RESOLUTION=426x240;

 #           dash off;
            dash_nested on;
            #dash_repetition on;
            dash_path /opt/data;
            dash_fragment 4;
            dash_playlist_length 120;
            dash_cleanup on;

            dash_clock_compensation http_head;
            dash_clock_helper_uri https://live.ebhh-hosting.net/time;
            dash_variant _720p2628kbs BANDWIDTH=2628000,RESOLUTION=1280x720;
            dash_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
            dash_variant _360p878kbs BANDWIDTH=878000,RESOLUTION=640x360;
            dash_variant _240p528kbs BANDWIDTH=528000,RESOLUTION=426x240;
            dash_variant _240p264kbs BANDWIDTH=264000,RESOLUTION=426x240;
        }
    }
}

http {
    access_log /dev/stdout combined;

    sendfile        on;    
    keepalive_timeout  65;

    lua_package_path    "/usr/local/share/lua/5.1/?.lua;$prefix/?.lua;/usr/local/lib/lua/jit/?.lua";
    lua_shared_dict     streams    1M;
    init_by_lua_block {
        json = require 'cjson'
        -- reqargs = require 'resty.reqargs'
        function Set (list)
            local set = {}
            for _, l in ipairs(list) do set[l] = true end
                return set
            end

            conf = require 'conf'
    }

    # ssl_ciphers         HIGH:!aNULL:!MD5;
    # ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    # ssl_session_cache   shared:SSL:10m;
    # ssl_session_timeout 10m;

    server {
        # listen ${HTTP_PORT};
        listen 80;

        location /rtmp_onpublish {
            proxy_pass http://localhost/rtmp_auth;
 #           lua_need_request_body on;
 #           header_filter_by_lua_block {
 #               local streams = ngx.shared.streams
 #               local get, post, files = require "resty.reqargs"()
 #               ngx.log(ngx.INFO, json.encode(post))
 #               streams:set(post.name, 1)
 #          }
        }

        location /rtmp_onplay {
            lua_need_request_body on;
            content_by_lua_block {
            }
        }

        location /rtmp_ondone {
            lua_need_request_body on;
            content_by_lua_block {
                local streams = ngx.shared.streams
                local get, post, files = require "resty.reqargs"()
                ngx.log(ngx.NOTICE, json.encode(post))
                streams:set(post.name, 0)
                ngx.exit(ngx.HTTP_OK)
            }
        }

        location /rtmp_auth {
            lua_need_request_body on;
            content_by_lua_block {
                local get, post, files = require "resty.reqargs"()
                -- ngx.log(ngx.NOTICE, json.encode(post))

                if conf.valid_keys[post.key] then
                    local streams = ngx.shared.streams
                    streams:set(post.name, 1)
                    ngx.exit(ngx.HTTP_OK)
                else
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }
        }

    #     location / {
    #         return 301 https://$host$request_uri;
    #     }
    # }

    # server {
    #     # Uncomment these lines to enable SSL.
    #     # Update the ssl paths with your own certificate and private key.
    #     # cert.pem  chain.pem  fullchain.pem  privkey.pem
    #     listen {HTTPS_PORT} ssl;
    #     ssl_certificate     /etc/letsencrypt/live/live.ecclesias.net/cert.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/live.ecclesias.net/privkey.pem;

        location /live {
          alias /opt/data;
          types {
              application/vnd.apple.mpegurl m3u8;
              video/mp2t ts;
              application/dash+xml mpd;
              video/mp4 m4v;
              audio/mp4 m4a;
              video/iso.segment seg;
          }
          add_header Cache-Control no-cache;
          add_header Access-Control-Allow-Origin *;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }

        location /static {
            alias /www/static;
        }

        location /time {
            return 200;
        }

        location = /crossdomain.xml {
            root /www/static;
            default_type text/xml;
            expires 24h;
        }

        location /isOnAir {
            content_by_lua_block {
                local streams = ngx.shared.streams
                local get, post, files = require "resty.reqargs"()
                ngx.log(ngx.NOTICE, json.encode(post))
                if streams:get(get.name) == 1 then
                    ngx.exit(ngx.HTTP_OK)
                else
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end 
            }  
        }

        location ~ \.css {
            header_filter_by_lua_block {
                ngx.header["content-type"] = 'text/css'
            }
        }

        location ~ \.js {
            header_filter_by_lua_block {
                ngx.header["content-type"] = 'application/x-javascript'
            }
        }

        location / {
            body_filter_by_lua_block {
                local body = ngx.arg[1] --Put body into local var
                local key = ngx.re.gsub(ngx.re.gsub(ngx.var.request_uri, "/", ""), "\\?.*", "")
                ngx.arg[1] = ngx.re.gsub(body, "\\${key}", key)
            }

            header_filter_by_lua_block {
                ngx.header["content-length"] = nil
            }

            if (!-e $request_filename) {
                set $test  V;
            }

            if ($request_uri !~ "(\.m3u8|\.ts)") {
                set $test  "${test}N";
            }

            if ($test = VN) {
               rewrite ^(.*)$ /video.html?sometest$1 last;
            }
        }
    }
}
